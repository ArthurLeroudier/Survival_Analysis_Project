###IMPORTS

library(KMsurv)
library(survival)
library(ggplot2)
library(survminer)
library(survival)
library(data.table)
library(joineRML)
library(tidyr)
library(dplyr)
library(purrr)

#setup
set.seed(0)
data(pbc2)



###PART A

##Missing Values
colSums(is.na(pbc2))
missing_row <- data.frame(id= pbc2$id, missing = rowSums(is.na(pbc2)))
missing_row <-missing_row[missing_row$missing>0,]
missing_row

#Which variables are missing for each moment and patient
# Build a data.frame row-by-row
missing_info <- data.frame(
  id      = pbc2$id,
  year    = pbc2$year,
  missing = rowSums(is.na(pbc2)),
  vars    = apply(pbc2, 1, function(x) {
    vars <- names(pbc2)[is.na(x)]
    if (length(vars)>0) paste(vars, collapse = ", ") else NA
  }),
  stringsAsFactors = FALSE
)

# Keep only the visits with at least one missing value
missing_info <- missing_info[missing_info$missing > 0, ]

# Inspect
print(missing_info)

# It appeears at the last observation there are more missing values than at other measurements
#Adding a comn the idicate if it is the last observation of a given patient
pbc2$last_obs <- with(pbc2, year == ave(year, id, FUN = max))

missing_info <- data.frame(
  id       = pbc2$id,
  year     = pbc2$year,
  status   = pbc2$status,              # add the patient’s status here
  missing  = rowSums(is.na(pbc2)),
  last_obs = pbc2$last_obs,
  vars     = apply(pbc2, 1, function(x) {
    m <- names(pbc2)[is.na(x)]
    if (length(m)) paste(m, collapse = ", ") else NA
  }),
  stringsAsFactors = FALSE
)

# Keep only the visits with at least one missing value
missing_info <- missing_info[missing_info$missing > 0, ]

# Inspect
print(missing_info)

# Calculating missing values for last visit 
total_visits <- nrow(missing_info)

# 2) number of those visits that are last_obs = TRUE
last_visits   <- sum(missing_info$last_obs)

# 3) number of those visits that are last_obs = FALSE
other_visits  <- total_visits - last_visits

# 4) total missing-fields across those groups
missing_by_group <- tapply(
  missing_info$missing,
  missing_info$last_obs,
  sum
)

# 5) average # of missing measurements per visit in each group
avg_missing_by_group <- tapply(
  missing_info$missing,
  missing_info$last_obs,
  mean
)

# Print a neat summary
cat("Visits with missing data:\n")
cat("  Last visit:    ", last_visits,    " rows,", 
    missing_by_group["TRUE"], "total missing fields, avg =", 
    round(avg_missing_by_group["TRUE"],2), "\n")
cat("  Other visits:  ", other_visits,   " rows,", 
    missing_by_group["FALSE"],"total missing fields, avg =", 
    round(avg_missing_by_group["FALSE"],2), "\n")

# among the visits with missing data, keep only the last observations
last_missing <- missing_info[missing_info$last_obs, ]

# table of patient status at those last visits
table(last_missing$status)
tab <- table(last_missing$status)
prop <- round(100 * tab / sum(tab), 1)
data.frame(
  status      = names(tab),
  n_missing   = as.integer(tab),
  pct_missing = as.numeric(prop)
)



##Constant variables
dif_values <- data.table(pbc2)[, lapply(.SD, function(x) length(unique(x))), by=id]
#^for each individual we check how many different values for each variable
check_constants <- colSums(dif_values[,!'id'])
check_constants #if the value is 312, the variable is constant for a given individual
#constant variables are: years, status, drug, age, sex, status2
pbc2_constants <- unique(pbc2[,c('years', 'status', 'drug', 'age', 'sex', 'status2')])
hist(pbc2$years)

#creating a dataset at a baseline (years==0)
pbc2_baseline = pbc2 %>% 
  filter(year == 0) %>%
  select(-year) 



#Barplot with counts of status of patients 
ggplot(pbc2_baseline, aes(x = status, fill = status)) +
  geom_bar() +
  scale_fill_brewer(palette = "Set2") +
  labs(title = "Distribution of Patient Status", x = "Status", y = "Count") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
  theme_minimal()

# Barplot of the distribution between placebo and treatment
ggplot(pbc2_baseline, aes(x = drug, fill = drug)) +
  geom_bar() +
  scale_fill_brewer(palette = "Paired") +
  labs(title = "Treatment Group Distribution", x = "Treatment", y = "Count") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
  theme_minimal()

ggplot(pbc2_baseline, aes(x = drug, fill = status)) +
  geom_bar() +
  scale_fill_brewer(palette = "Paired") +
  labs(
    title = "Treatment Group by Patient Status",
    x     = "Treatment",
    y     = "Count",
    fill  = "Final Status"
  ) +
  geom_text(
    stat    = "count",
    aes(label = ..count..),
    position = position_stack(vjust = 0.5),
    color    = "white",
    size     = 3
  ) +
  theme_minimal()

# Histogram of the distriburion of age
ggplot(pbc2_constants, aes(x = age)) +
  geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
  labs(title = "Age Distribution at Baseline", x = "Age (years)", y = "Number of Patients") +
  theme_minimal()

# Distribution of sex
ggplot(pbc2_constants, aes(x = sex, fill = sex)) +
  geom_bar() +
  scale_fill_manual(values = c("female" = "#E69F00", "male" = "#56B4E9")) +
  labs(title = "Sex Distribution", x = "Sex", y = "Count") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
  theme_minimal()

# SPIDERS
plot_status_by_variable <- function(varname, data) {
  ggplot(data, aes_string(x = varname, fill = "factor(status2)")) +
    geom_bar(position = "fill") +
    scale_fill_manual(
      values = c("0" = "steelblue", "1" = "firebrick"),
      labels = c("Alive or Transplanted", "Dead")
    ) +
    labs(
      title = paste("Proportion of Deaths by", varname),
      x = varname,
      y = "Proportion",
      fill = "Final Outcome"
    ) +
    theme_minimal()
}

plot_status_by_variable("sex", pbc2_baseline)
plot_status_by_variable("drug", pbc2_baseline)
plot_status_by_variable("ascites", pbc2_baseline)
plot_status_by_variable("hepatomegaly", pbc2_baseline)
plot_status_by_variable("spiders", pbc2_baseline)
plot_status_by_variable("edema", pbc2_baseline)
plot_status_by_variable("histologic", pbc2_baseline)

# Plotting all variables
plots_part_a <- list(
  sex          = plot_status_by_variable("sex", pbc2_baseline),
  drug         = plot_status_by_variable("drug", pbc2_baseline),
  ascites      = plot_status_by_variable("ascites", pbc2_baseline),
  hepatomegaly = plot_status_by_variable("hepatomegaly", pbc2_baseline),
  spiders      = plot_status_by_variable("spiders", pbc2_baseline),
  edema        = plot_status_by_variable("edema", pbc2_baseline),
  histologic   = plot_status_by_variable("histologic", pbc2_baseline)
)


purrr::iwalk(
  plots_part_a,
  ~ ggsave(
    filename = paste0(.y, ".png"),
    plot     = .x,
    width    = 6,
    height   = 4,
    dpi      = 300
  )
)

## Quantitative variables
#Mean curve
plot_biomarker_by_status <- function(data, variable, y_label = NULL, title = NULL) {
  var_sym <- rlang::sym(variable)
  
  df_filtered <- data %>%
    filter(!is.na(!!var_sym))
  
  label_map <- df_filtered %>%
    distinct(id, status) %>%
    count(status) %>%
    mutate(label = paste0(status, " (n = ", n, ")")) %>%
    select(status, label)
  
  df_labeled <- left_join(data, label_map, by = "status")
  
  # Default title/y_label if not provided
  if (is.null(title))   title   <- paste(variable, "Over Time by Status")
  if (is.null(y_label)) y_label <- variable
  
  ggplot(df_labeled, aes(x = year, y = !!var_sym, group = id, color = label)) +
    geom_line(alpha = 0.2, na.rm = TRUE) +
    geom_point(alpha = 0.2, na.rm = TRUE) +
    geom_smooth(aes(group = label), method = "loess", se = TRUE, size = 1.2, na.rm = TRUE) +
    labs(
      title = title,
      x = "Years Since Enrollment",
      y = y_label,
      color = "Final Status"
    ) +
    theme_minimal()
}


plot_biomarker_by_status(pbc2, "serBilir", y_label = "Serum Bilirubin (mg/dL)", title = "Serum Bilirubin Over Time by Status")
plot_biomarker_by_status(pbc2, "serChol",  y_label = "Serum Cholesterol (mg/dL)")
plot_biomarker_by_status(pbc2, "alkaline", y_label = "Alkaline Phosphatase (U/L)")
plot_biomarker_by_status(pbc2, "SGOT",     y_label = "SGOT (U/mL)")
plot_biomarker_by_status(pbc2, "platelets", y_label = "Platelet Count (×1000/µL)")
plot_biomarker_by_status(pbc2, "prothrombin", y_label = "Prothrombin Time (s)")







# PART B
# Fit Kaplan-Meier survival curves stratified by histologic stage
surv_histologic <- survfit(Surv(years, status2) ~ histologic, data = pbc2)

# Summary of the survival object
summary(surv_histologic)

# Plot the Kaplan-Meier curves
ggsurvplot(
  surv_histologic,
  data = pbc2,
  xlab = "Years since baseline",
  ylab = "Survival probability",
  legend.title = "Histologic stage",
  palette = "Dark2",
  ggtheme = theme_minimal()
)

# Print survival object (for inspection)
print(surv_histologic)

# Median survival time for each group
quantile(surv_histologic, probs = c(0.25, 0.5, 0.75))

# Log-rank test (default: equal weights)
logrank_result <- survdiff(Surv(years, status2) ~ histologic, data = pbc2)
print(logrank_result)

# Peto-Peto test (more weight to early differences)
peto_result <- survdiff(Surv(years, status2) ~ histologic, data = pbc2, rho = 1)
print(peto_result)


# Fit Kaplan-Meier survival curves stratified by edema
surv_edema <- survfit(Surv(years, status2) ~ edema, data = pbc2)

# Summary of the survival object
summary(surv_edema)

# Plot Kaplan-Meier curves
ggsurvplot(
  surv_edema,
  data = pbc2,
  xlab = "Years since baseline",
  ylab = "Survival probability",
  legend.title = "Edema status",
  palette = "Dark2",
  ggtheme = theme_minimal()
)

# Print survival object (optional)
print(surv_edema)

# Median survival time per group
quantile(surv_edema, probs = c(0.25, 0.5, 0.75))

# Log-rank test (equal weights)
logrank_edema <- survdiff(Surv(years, status2) ~ edema, data = pbc2)
print(logrank_edema)

# Peto-Peto test (early differences)
peto_edema <- survdiff(Surv(years, status2) ~ edema, data = pbc2, rho = 1)
print(peto_edema)


# 1. Fit Kaplan-Meier survival curves
surv_treatment <- survfit(Surv(years, status2) ~ drug, data = pbc2)

# 2. Plot survival curves
ggsurvplot(
  surv_treatment,
  data = pbc2,
  xlab = "Years since baseline",
  ylab = "Survival probability",
  legend.title = "Treatment group",
  palette = "Dark2",
  ggtheme = theme_minimal()
)

# 3. Print survival object and median survival times
print(surv_treatment)
quantile(surv_treatment, probs = c(0.25, 0.5, 0.75))

# 4. Log-rank test
logrank_treatment <- survdiff(Surv(years, status2) ~ drug, data = pbc2)
print(logrank_treatment)

# 5. Peto-Peto test
peto_treatment <- survdiff(Surv(years, status2) ~ drug, data = pbc2, rho = 1)
print(peto_treatment)

































#Exporting to pdf
# Open a multipage PDF device; adjust width and height (in inches) as needed
pdf("all_biomarker_plots.pdf", width = 8, height = 6)  # one plot per page by default :contentReference[oaicite:3]{index=3}

#— Your existing code, now inside the pdf() block —#

# Constant variables
dif_values <- data.table(pbc2)[, lapply(.SD, function(x) length(unique(x))), by = id]
check_constants <- colSums(dif_values[, !"id"])
pbc2_constants  <- unique(pbc2[, c('years','status','drug','age','sex','status2')])

# 1. Histogram of 'years'
hist(pbc2$years,
     main = "Years from Registration to Endpoint",
     xlab = "Years",
     ylab = "Frequency")  # base R plot :contentReference[oaicite:6]{index=6}

# 2. Barplot of patient status at baseline
print(
  ggplot(pbc2_constants, aes(x = status, fill = status)) +
    geom_bar() +
    scale_fill_brewer(palette = "Set2") +
    labs(title = "Distribution of Patient Status", x = "Status", y = "Count") +
    geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
    theme_minimal()
)  # ggplot2 plot :contentReference[oaicite:7]{index=7}

# 3. Barplot of treatment groups
print(
  ggplot(pbc2_constants, aes(x = drug, fill = drug)) +
    geom_bar() +
    scale_fill_brewer(palette = "Paired") +
    labs(title = "Treatment Group Distribution", x = "Treatment", y = "Count") +
    geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
    theme_minimal()
)

ggplot(pbc2_constants, aes(x = drug, fill = status)) +
  geom_bar() +
  scale_fill_brewer(palette = "Paired") +
  labs(
    title = "Treatment Group by Patient Status",
    x     = "Treatment",
    y     = "Count",
    fill  = "Final Status"
  ) +
  geom_text(
    stat    = "count",
    aes(label = ..count..),
    position = position_stack(vjust = 0.5),
    color    = "white",
    size     = 3
  ) +
  theme_minimal()


# 4. Age distribution histogram
print(
  ggplot(pbc2_constants, aes(x = age)) +
    geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
    labs(title = "Age Distribution", x = "Age (years)", y = "Number of Patients") +
    theme_minimal()
)

# 5. Sex distribution barplot
print(
  ggplot(pbc2_constants, aes(x = sex, fill = sex)) +
    geom_bar() +
    scale_fill_manual(values = c("female" = "#E69F00", "male" = "#56B4E9")) +
    labs(title = "Sex Distribution", x = "Sex", y = "Count") +
    geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
    theme_minimal()
)

# 6–11. Time-series biomarker plots by status
plot_biomarker_by_status <- function(data, variable, y_label = NULL, title = NULL) {
  var_sym <- rlang::sym(variable)
  df_filtered <- data %>% filter(!is.na(!!var_sym))
  label_map   <- df_filtered %>% distinct(id, status) %>% count(status) %>%
    mutate(label = paste0(status, " (n = ", n, ")")) %>%
    select(status, label)
  df_labeled <- left_join(data, label_map, by = "status")
  if (is.null(title))   title   <- paste(variable, "Over Time by Status")
  if (is.null(y_label)) y_label <- variable
  
  p <- ggplot(df_labeled, aes(x = year, y = !!var_sym, group = id, color = label)) +
    geom_line(alpha = 0.2, na.rm = TRUE) +
    geom_point(alpha = 0.2, na.rm = TRUE) +
    geom_smooth(aes(group = label), method = "loess", se = TRUE, size = 1.2, na.rm = TRUE) +
    labs(title = title, x = "Years Since Enrollment", y = y_label, color = "Final Status") +
    theme_minimal()
  print(p)  # ensure plot is recorded :contentReference[oaicite:8]{index=8}
}

# Apply to each biomarker
plot_biomarker_by_status(pbc2, "serBilir", y_label = "Serum Bilirubin (mg/dL)", title = "Serum Bilirubin Over Time by Status")
plot_biomarker_by_status(pbc2, "serChol",  y_label = "Serum Cholesterol (mg/dL)")
plot_biomarker_by_status(pbc2, "alkaline", y_label = "Alkaline Phosphatase (U/L)")
plot_biomarker_by_status(pbc2, "SGOT",     y_label = "SGOT (U/mL)")
plot_biomarker_by_status(pbc2, "platelets", y_label = "Platelet Count (×1000/µL)")
plot_biomarker_by_status(pbc2, "prothrombin", y_label = "Prothrombin Time (s)")
# …add more plots here as needed
dev.list()  


dev.off()  # write and close the PDF :contentReference[oaicite:12]{index=12}
dev.list()

